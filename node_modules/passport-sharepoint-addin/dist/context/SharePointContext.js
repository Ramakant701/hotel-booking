"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const Promise = require("bluebird");
const TokenCache_1 = require("../cache/TokenCache");
class SharePointContext {
    constructor(authData, oauth) {
        this.authData = authData;
        this.oauth = oauth;
    }
    getUserAccessTokenForSPHost() {
        return this.getUserAccessToken(this.authData.spHostUrl);
    }
    getUserAccessTokenForSPAppWeeb() {
        return this.getUserAccessToken(this.authData.spAppWebUrl);
    }
    getAppOnlyAccessTokenForSPHost() {
        return this.getAppOnlyAccessToken(this.authData.spHostUrl);
    }
    getAppOnlyAccessTokenForSPAppWeeb() {
        return this.getAppOnlyAccessToken(this.authData.spAppWebUrl);
    }
    getUserAccessToken(url) {
        const accessToken = SharePointContext.TokenCache.get(this.getUserCacheKey(url));
        if (!accessToken) {
            return this.createUserAccessToken(url)
                .then(accessToken => {
                SharePointContext.TokenCache.insert(accessToken, this.getUserCacheKey(url));
                return accessToken.value;
            });
        }
        return Promise.resolve(accessToken.value);
    }
    getAppOnlyAccessToken(url) {
        const accessToken = SharePointContext.TokenCache.get(this.getAppOnlyCacheKey(url));
        if (!accessToken) {
            return this.createAppOnlyAccessToken(url)
                .then(accessToken => {
                SharePointContext.TokenCache.insert(accessToken, this.getAppOnlyCacheKey(url));
                return accessToken.value;
            });
        }
        return Promise.resolve(accessToken.value);
    }
    getUserCacheKey(url) {
        return `${this.authData.cacheKey}_${url_1.parse(url).host}`;
    }
    getAppOnlyCacheKey(url) {
        return `${this.authData.realm}_${url_1.parse(url).host}`;
    }
}
SharePointContext.TokenCache = new TokenCache_1.TokenCache();
exports.SharePointContext = SharePointContext;
//# sourceMappingURL=SharePointContext.js.map