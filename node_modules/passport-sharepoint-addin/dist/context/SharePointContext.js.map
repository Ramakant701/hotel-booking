{"version":3,"file":"SharePointContext.js","sourceRoot":"","sources":["../../src/context/SharePointContext.ts"],"names":[],"mappings":";;AAAA,6BAAwC;AACxC,oCAAoC;AAEpC,oDAAiD;AAKjD;IAGI,YAAgC,QAAmB,EAAY,KAAmB;QAAlD,aAAQ,GAAR,QAAQ,CAAW;QAAY,UAAK,GAAL,KAAK,CAAc;IAClF,CAAC;IAEM,2BAA2B;QAC9B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IAEM,8BAA8B;QACjC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC;IAEM,8BAA8B;QACjC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC/D,CAAC;IAEM,iCAAiC;QACpC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACjE,CAAC;IAES,kBAAkB,CAAC,GAAW;QACpC,MAAM,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;QAEhF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,WAAW;gBACb,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;YAC7B,CAAC,CAAC,CAAC;QACX,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAES,qBAAqB,CAAC,GAAW;QACvC,MAAM,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;QAEnF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC;iBACpC,IAAI,CAAC,WAAW;gBACb,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC/E,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;YAC7B,CAAC,CAAC,CAAC;QACX,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAES,eAAe,CAAC,GAAW;QACjC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,WAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;IAES,kBAAkB,CAAC,GAAW;QACpC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,WAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAC1D,CAAC;;AAvDa,4BAAU,GAAgB,IAAI,uBAAU,EAAE,CAAC;AAD7D,8CA4DC","sourcesContent":["import { parse as urlparse } from 'url';\r\nimport * as Promise from 'bluebird';\r\nimport { ITokenCache } from '../cache/ITokenCache';\r\nimport { TokenCache } from '../cache/TokenCache';\r\nimport { IAuthData } from '../strategy/IAuthData';\r\nimport { IAccessToken } from '../common/IAccessToken';\r\nimport { IOAuthConfig } from '../common/IOAuthConfig';\r\n\r\nexport abstract class SharePointContext {\r\n    public static TokenCache: ITokenCache = new TokenCache();\r\n\r\n    protected constructor(protected authData: IAuthData, protected oauth: IOAuthConfig) {\r\n    }\r\n\r\n    public getUserAccessTokenForSPHost(): Promise<string> {\r\n        return this.getUserAccessToken(this.authData.spHostUrl);\r\n    }\r\n\r\n    public getUserAccessTokenForSPAppWeeb(): Promise<string> {\r\n        return this.getUserAccessToken(this.authData.spAppWebUrl);\r\n    }\r\n\r\n    public getAppOnlyAccessTokenForSPHost(): Promise<string> {\r\n        return this.getAppOnlyAccessToken(this.authData.spHostUrl);\r\n    }\r\n\r\n    public getAppOnlyAccessTokenForSPAppWeeb(): Promise<string> {\r\n        return this.getAppOnlyAccessToken(this.authData.spAppWebUrl);\r\n    }\r\n\r\n    protected getUserAccessToken(url: string): Promise<string> {\r\n        const accessToken = SharePointContext.TokenCache.get(this.getUserCacheKey(url));\r\n\r\n        if (!accessToken) {\r\n            return this.createUserAccessToken(url)\r\n                .then(accessToken => {\r\n                    SharePointContext.TokenCache.insert(accessToken, this.getUserCacheKey(url));\r\n                    return accessToken.value;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(accessToken.value);\r\n    }\r\n\r\n    protected getAppOnlyAccessToken(url: string): Promise<string> {\r\n        const accessToken = SharePointContext.TokenCache.get(this.getAppOnlyCacheKey(url));\r\n\r\n        if (!accessToken) {\r\n            return this.createAppOnlyAccessToken(url)\r\n                .then(accessToken => {\r\n                    SharePointContext.TokenCache.insert(accessToken, this.getAppOnlyCacheKey(url));\r\n                    return accessToken.value;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(accessToken.value);\r\n    }\r\n\r\n    protected getUserCacheKey(url: string): string {\r\n        return `${this.authData.cacheKey}_${urlparse(url).host}`;\r\n    }\r\n\r\n    protected getAppOnlyCacheKey(url: string): string {\r\n        return `${this.authData.realm}_${urlparse(url).host}`;\r\n    }\r\n\r\n    protected abstract createUserAccessToken(url: string): Promise<IAccessToken>;\r\n    protected abstract createAppOnlyAccessToken(url: string): Promise<IAccessToken>;\r\n}\r\n"]}