"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const passport = require("passport-strategy");
const url_1 = require("url");
const jwt = require("jsonwebtoken");
const request = require("request-promise");
const Consts_1 = require("../utils/Consts");
const TokenHelper_1 = require("../utils/TokenHelper");
class SharePointAddinStrategy extends passport.Strategy {
    constructor(options, callbackUrl, verify) {
        super();
        this.name = 'sharepoint';
        this.oauth = options;
        this.callbackUrl = callbackUrl;
        this.verify = verify;
    }
    authenticate(req, options) {
        const path = url_1.parse(this.callbackUrl).path;
        if (req.url.indexOf(path) !== -1) {
            return this.onReturnCallback(req, options);
        }
        const hostUrl = this.ensureTrailingSlash(req.query[Consts_1.Consts.SPHostUrl]);
        const returnUrl = this.callbackUrl + '?{StandardTokens}';
        const encodedReturnUrl = encodeURIComponent(returnUrl);
        const postRedirectUrl = `${hostUrl}_layouts/15/AppRedirect.aspx?client_id=${this.oauth.clientId}&redirect_uri=${encodedReturnUrl}`;
        this.redirect(postRedirectUrl);
    }
    onReturnCallback(req, options) {
        const spAppToken = req.body[Consts_1.Consts.SPAppToken];
        if (!spAppToken) {
            throw new Error('Unable to find SPAppToken');
        }
        const token = this.verifyAppToken(req, spAppToken);
        const hostUrl = this.ensureTrailingSlash(req.query[Consts_1.Consts.SPHostUrl]);
        const appWebUrl = req.query[Consts_1.Consts.SPAppWebUrl] ? this.ensureTrailingSlash(req.query[Consts_1.Consts.SPAppWebUrl]) : null;
        const authData = {
            spHostUrl: hostUrl,
            spAppWebUrl: appWebUrl,
            realm: token.realm,
            cacheKey: token.context.CacheKey,
            refreshToken: token.refreshtoken,
            securityTokenServiceUri: token.context.SecurityTokenServiceUri
        };
        this.getAccessToken(authData, req)
            .then(accessToken => {
            const headers = {
                'Accept': 'application/json;odata=verbose',
                'Authorization': 'Bearer ' + accessToken.value
            };
            return request.get(`${hostUrl}_api/web/currentuser`, {
                json: true,
                headers: headers
            });
        })
            .then(data => {
            const profile = {
                loginName: data.d.LoginName,
                displayName: data.d.Title,
                email: data.d.Email,
                authData: authData
            };
            return this.verify(profile);
        })
            .then((spuser) => {
            this.success(spuser, null);
        });
    }
    getAccessToken(authData, req) {
        const hostUrl = this.ensureTrailingSlash(req.query[Consts_1.Consts.SPHostUrl]);
        if (!hostUrl) {
            throw new Error('Unable to find SPHostUrl in query string');
        }
        return TokenHelper_1.TokenHelper.getUserAccessToken(authData, this.oauth, authData.spHostUrl);
    }
    verifyAppToken(req, spAppToken) {
        const secret = Buffer.from(this.oauth.clientSecret, 'base64');
        const token = jwt.verify(spAppToken, secret);
        const audience = req.get('host');
        const realm = token.iss.substring(token.iss.indexOf('@') + 1);
        const validAudience = `${this.oauth.clientId}/${audience}@${realm}`;
        if (validAudience !== token.aud) {
            throw new Error('SP app token validation failed: invalid audience');
        }
        token.realm = realm;
        token.context = JSON.parse(token.appctx);
        return token;
    }
    ensureTrailingSlash(url) {
        if (!url.endsWith('/')) {
            return url + '/';
        }
        return url;
    }
}
exports.SharePointAddinStrategy = SharePointAddinStrategy;
//# sourceMappingURL=SharePointAddinStrategy.js.map