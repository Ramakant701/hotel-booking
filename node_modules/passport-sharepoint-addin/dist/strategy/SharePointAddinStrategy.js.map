{"version":3,"file":"SharePointAddinStrategy.js","sourceRoot":"","sources":["../../src/strategy/SharePointAddinStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import * as passport from 'passport-strategy';\r\nimport { AuthenticateOptions } from 'passport';\r\nimport { parse as urlparse } from 'url';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { Request } from 'express';\r\nimport * as request from 'request-promise';\r\nimport * as Promise from 'bluebird';\r\nimport { ISharePointProfile } from './ISharePointProfile';\r\nimport { IAppToken } from './IAppToken';\r\nimport { IOAuthConfig } from '../common/IOAuthConfig';\r\nimport { Consts } from '../utils/Consts';\r\nimport { TokenHelper } from '../utils/TokenHelper';\r\nimport { IAccessToken } from '../common/IAccessToken';\r\nimport { IAuthData } from './IAuthData';\r\n\r\nexport class SharePointAddinStrategy extends passport.Strategy {\r\n\r\n    public name: string;\r\n    private oauth: IOAuthConfig;\r\n    private callbackUrl: string;\r\n    private verify: any;\r\n\r\n    constructor(options: IOAuthConfig, callbackUrl: string, verify: any) {\r\n        super();\r\n\r\n        this.name = 'sharepoint';\r\n        this.oauth = options;\r\n        this.callbackUrl = callbackUrl;\r\n        this.verify = verify;\r\n    }\r\n\r\n    public authenticate(req: Request, options: AuthenticateOptions): void {\r\n        const path: string = urlparse(this.callbackUrl).path;\r\n        if (req.url.indexOf(path) !== -1) {\r\n            return this.onReturnCallback(req, options);\r\n        }\r\n\r\n        const hostUrl = this.ensureTrailingSlash(req.query[Consts.SPHostUrl]);\r\n        const returnUrl = this.callbackUrl + '?{StandardTokens}';\r\n        const encodedReturnUrl = encodeURIComponent(returnUrl);\r\n        const postRedirectUrl: string = `${hostUrl}_layouts/15/AppRedirect.aspx?client_id=${this.oauth.clientId}&redirect_uri=${encodedReturnUrl}`;\r\n\r\n        this.redirect(postRedirectUrl);\r\n    }\r\n\r\n    private onReturnCallback(req: Request, options: AuthenticateOptions): void {\r\n        const spAppToken = req.body[Consts.SPAppToken];\r\n        if (!spAppToken) {\r\n            throw new Error('Unable to find SPAppToken');\r\n        }\r\n\r\n        const token = this.verifyAppToken(req, spAppToken);\r\n        const hostUrl = this.ensureTrailingSlash(req.query[Consts.SPHostUrl]);\r\n        const appWebUrl = req.query[Consts.SPAppWebUrl] ? this.ensureTrailingSlash(req.query[Consts.SPAppWebUrl]) : null;\r\n        const authData: IAuthData = {\r\n            spHostUrl: hostUrl,\r\n            spAppWebUrl: appWebUrl,\r\n            realm: token.realm,\r\n            cacheKey: token.context.CacheKey,\r\n            refreshToken: token.refreshtoken,\r\n            securityTokenServiceUri: token.context.SecurityTokenServiceUri\r\n        };\r\n\r\n        this.getAccessToken(authData, req)\r\n            .then(accessToken => {\r\n                const headers = {\r\n                    'Accept': 'application/json;odata=verbose',\r\n                    'Authorization': 'Bearer ' + accessToken.value\r\n                };\r\n                return request.get(`${hostUrl}_api/web/currentuser`, {\r\n                    json: true,\r\n                    headers: headers\r\n                });\r\n            })\r\n            .then(data => {\r\n                const profile: ISharePointProfile = {\r\n                    loginName: data.d.LoginName,\r\n                    displayName: data.d.Title,\r\n                    email: data.d.Email,\r\n                    authData: authData\r\n                };\r\n\r\n                return this.verify(profile);\r\n            })\r\n            .then((spuser: any) => {\r\n                this.success(spuser, null);\r\n            });\r\n    }\r\n\r\n    private getAccessToken(authData: IAuthData, req: Request): Promise<IAccessToken> {\r\n        const hostUrl = this.ensureTrailingSlash(req.query[Consts.SPHostUrl]);\r\n        if (!hostUrl) {\r\n            throw new Error('Unable to find SPHostUrl in query string');\r\n        }\r\n\r\n        return TokenHelper.getUserAccessToken(authData, this.oauth, authData.spHostUrl);\r\n    }\r\n\r\n    private verifyAppToken(req: Request, spAppToken: any): IAppToken {\r\n        const secret = Buffer.from(this.oauth.clientSecret, 'base64');\r\n        const token = jwt.verify(spAppToken, secret) as IAppToken;\r\n        const audience = req.get('host');\r\n        const realm = token.iss.substring(token.iss.indexOf('@') + 1);\r\n        const validAudience = `${this.oauth.clientId}/${audience}@${realm}`;\r\n\r\n        if (validAudience !== token.aud) {\r\n            throw new Error('SP app token validation failed: invalid audience');\r\n        }\r\n\r\n        token.realm = realm;\r\n        token.context = JSON.parse(token.appctx);\r\n        return token;\r\n    }\r\n\r\n    private ensureTrailingSlash(url: string): string {\r\n        if (!url.endsWith('/')) {\r\n            return url + '/';\r\n        }\r\n\r\n        return url;\r\n    }\r\n}\r\n"]}