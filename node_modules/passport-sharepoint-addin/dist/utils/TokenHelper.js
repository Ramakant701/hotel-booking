"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const request = require("request-promise");
const Consts_1 = require("./Consts");
class TokenHelper {
    static getUserAccessToken(authData, oauth, url) {
        const spAuthority = url_1.parse(url).host;
        const resource = `${Consts_1.Consts.SharePointPrincipal}/${spAuthority}@${authData.realm}`;
        const appId = `${oauth.clientId}@${authData.realm}`;
        const tokenService = url_1.parse(authData.securityTokenServiceUri);
        const tokenUrl = `${tokenService.protocol}//${tokenService.host}/${authData.realm}${tokenService.path}`;
        return request.post(tokenUrl, {
            form: {
                grant_type: 'refresh_token',
                client_id: appId,
                client_secret: oauth.clientSecret,
                refresh_token: authData.refreshToken,
                resource: resource
            },
            json: true
        })
            .then(data => {
            return {
                value: data.access_token,
                expireOn: new Date(parseInt(data.expires_on, 10))
            };
        });
    }
    static getAppOnlyAccessToken(authData, oauth, url) {
        const spAuthority = url_1.parse(url).host;
        const resource = `${Consts_1.Consts.SharePointPrincipal}/${spAuthority}@${authData.realm}`;
        const appId = `${oauth.clientId}@${authData.realm}`;
        const tokenService = url_1.parse(authData.securityTokenServiceUri);
        const tokenUrl = `${tokenService.protocol}//${tokenService.host}/${authData.realm}${tokenService.path}`;
        return request.post(tokenUrl, {
            form: {
                grant_type: 'client_credentials',
                client_id: appId,
                client_secret: oauth.clientSecret,
                scope: resource,
                resource: resource
            },
            json: true
        })
            .then(data => {
            return {
                value: data.access_token,
                expireOn: new Date(parseInt(data.expires_on, 10))
            };
        });
    }
}
exports.TokenHelper = TokenHelper;
//# sourceMappingURL=TokenHelper.js.map