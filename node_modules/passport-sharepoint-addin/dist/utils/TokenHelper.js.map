{"version":3,"file":"TokenHelper.js","sourceRoot":"","sources":["../../src/utils/TokenHelper.ts"],"names":[],"mappings":";;AAAA,6BAAwC;AACxC,2CAA2C;AAG3C,qCAAkC;AAKlC;IACW,MAAM,CAAC,kBAAkB,CAAC,QAAmB,EAAE,KAAmB,EAAE,GAAW;QAClF,MAAM,WAAW,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACvC,MAAM,QAAQ,GAAG,GAAG,eAAM,CAAC,mBAAmB,IAAI,WAAW,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClF,MAAM,KAAK,GAAG,GAAG,KAAK,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QACpD,MAAM,YAAY,GAAG,WAAQ,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;QAChE,MAAM,QAAQ,GAAG,GAAG,YAAY,CAAC,QAAQ,KAAK,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QAExG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC1B,IAAI,EAAE;gBACF,UAAU,EAAE,eAAe;gBAC3B,SAAS,EAAE,KAAK;gBAChB,aAAa,EAAE,KAAK,CAAC,YAAY;gBACjC,aAAa,EAAE,QAAQ,CAAC,YAAY;gBACpC,QAAQ,EAAE,QAAQ;aACrB;YACD,IAAI,EAAE,IAAI;SACb,CAAC;aACG,IAAI,CAAC,IAAI;YACN,MAAM,CAAC;gBACH,KAAK,EAAE,IAAI,CAAC,YAAY;gBACxB,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;aACpC,CAAA;QACrB,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,MAAM,CAAC,qBAAqB,CAAC,QAAmB,EAAE,KAAmB,EAAE,GAAW;QACrF,MAAM,WAAW,GAAG,WAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACvC,MAAM,QAAQ,GAAG,GAAG,eAAM,CAAC,mBAAmB,IAAI,WAAW,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClF,MAAM,KAAK,GAAG,GAAG,KAAK,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QACpD,MAAM,YAAY,GAAG,WAAQ,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;QAChE,MAAM,QAAQ,GAAG,GAAG,YAAY,CAAC,QAAQ,KAAK,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QAExG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC1B,IAAI,EAAE;gBACF,UAAU,EAAE,oBAAoB;gBAChC,SAAS,EAAE,KAAK;gBAChB,aAAa,EAAE,KAAK,CAAC,YAAY;gBACjC,KAAK,EAAE,QAAQ;gBACf,QAAQ,EAAE,QAAQ;aACrB;YACD,IAAI,EAAE,IAAI;SACb,CAAC;aACG,IAAI,CAAC,IAAI;YACN,MAAM,CAAC;gBACH,KAAK,EAAE,IAAI,CAAC,YAAY;gBACxB,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;aACpC,CAAA;QACrB,CAAC,CAAC,CAAC;IACX,CAAC;CACJ;AAlDD,kCAkDC","sourcesContent":["import { parse as urlparse } from 'url';\r\nimport * as request from 'request-promise';\r\nimport * as Promise from 'bluebird';\r\n\r\nimport { Consts } from './Consts';\r\nimport { IOAuthConfig } from '../common/IOAuthConfig';\r\nimport { IAccessToken } from '../common/IAccessToken';\r\nimport { IAuthData } from '../strategy/IAuthData';\r\n\r\nexport class TokenHelper {\r\n    public static getUserAccessToken(authData: IAuthData, oauth: IOAuthConfig, url: string): Promise<IAccessToken> {\r\n        const spAuthority = urlparse(url).host;\r\n        const resource = `${Consts.SharePointPrincipal}/${spAuthority}@${authData.realm}`;\r\n        const appId = `${oauth.clientId}@${authData.realm}`;\r\n        const tokenService = urlparse(authData.securityTokenServiceUri);\r\n        const tokenUrl = `${tokenService.protocol}//${tokenService.host}/${authData.realm}${tokenService.path}`;\r\n\r\n        return request.post(tokenUrl, {\r\n            form: {\r\n                grant_type: 'refresh_token',\r\n                client_id: appId,\r\n                client_secret: oauth.clientSecret,\r\n                refresh_token: authData.refreshToken,\r\n                resource: resource\r\n            },\r\n            json: true\r\n        })\r\n            .then(data => {\r\n                return {\r\n                    value: data.access_token,\r\n                    expireOn: new Date(parseInt(data.expires_on, 10))\r\n                } as IAccessToken\r\n            });\r\n    }\r\n\r\n    public static getAppOnlyAccessToken(authData: IAuthData, oauth: IOAuthConfig, url: string): Promise<IAccessToken> {\r\n        const spAuthority = urlparse(url).host;\r\n        const resource = `${Consts.SharePointPrincipal}/${spAuthority}@${authData.realm}`;\r\n        const appId = `${oauth.clientId}@${authData.realm}`;\r\n        const tokenService = urlparse(authData.securityTokenServiceUri);\r\n        const tokenUrl = `${tokenService.protocol}//${tokenService.host}/${authData.realm}${tokenService.path}`;\r\n\r\n        return request.post(tokenUrl, {\r\n            form: {\r\n                grant_type: 'client_credentials',\r\n                client_id: appId,\r\n                client_secret: oauth.clientSecret,\r\n                scope: resource,\r\n                resource: resource\r\n            },\r\n            json: true\r\n        })\r\n            .then(data => {\r\n                return {\r\n                    value: data.access_token,\r\n                    expireOn: new Date(parseInt(data.expires_on, 10))\r\n                } as IAccessToken\r\n            });\r\n    }\r\n}\r\n"]}